matrix premul(point p0, point p1, point p2)
{
    matrix m = matrix(
        1.0, 0.0, 0.0, 0.0,
        -2.0, 2.0, 0.0, 0.0,
        1.0, -2.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 0.0
    );

    matrix p = matrix(
        p0.x, p0.y, p0.z, 0.0,
        p1.x, p1.y, p1.z, 0.0,
        p2.x, p2.y, p2.z, 0.0,
        0.0, 0.0, 0.0, 0.0
    );

    return m * p;
}

point row(matrix M, int r)
{
    return point(M[r][0], M[r][1], M[r][2]);
}


point curve(matrix Q, float t)
{
    return row(Q, 0) + row(Q, 1) * t + row(Q, 2) * t * t;
}

point tangent(matrix Q, float t)
{
    return row(Q, 1) + row(Q, 2) * 2 * t;
}


point lerp(point p0, point p1, float t)
{
    return p0 * (1-t) + p1 * t;
}

float lprj(point p0, point p1, point p)
{
    vector q1 = p1 - p0;
    return dot(p - p0, q1) / dot(q1, q1);
}

shader bezier
(
    point UV = vector(0, 0, 0)
        [[ string description="Sampling point" ]],
    point Pi = vector(0, 0, 0)
        [[ string description="Curve control point at start" ]],
    point Pc = vector(0, 0, 0)
        [[ string description="Curve control point at center" ]],
    point Po = vector(0, 0, 0)
        [[ string description="Curve control point at end" ]],
    output float t = 0
        [[ string description="Curve parameter of the Proj" ]],
    output point Proj = vector(0,0,0)
        [[ string description="Closest point" ]],
    output vector Tang = vector(0,0,0)
        [[ string description="Tangent vector (unnormalized)" ]],
    output float Dist = 0
        [[ string description="Distance from curve to sampling point" ]],
    output float sDist = 0
        [[ string description="Signed distance"]],
    output vector vDist = 0
        [[ string description="Vector distance"]],

    output float debug = 0
)
{
    matrix Q = premul(Pi, Pc, Po);

    /* linear approximation with midpoin */

    point pm1 = curve(Q, 0);
    point pm = curve(Q, 0.5);
    point pm2 = curve(Q, 1.0);

    float dm1 = length(pm1 - UV);
    float dm = length(pm - UV);
    float dm2 = length(pm2 - UV);

    debug = min(min(dm1, dm2), dm);

    float t1 = lprj(pm1, pm, UV) * 0.5;
    float t2 = lprj(pm, pm2, UV) * 0.5 + 0.5;

    if (t1 < 0.5 && t2 < 0.5) {  /* strict first segment */
        t = t1;
    }
    else if (t1 > 0.5 && t2 > 0.5) { /* strict second segment */
        t = t2;
    }
    else {
        float d1 = length(UV - curve(Q, t1));
        float d2 = length(UV - curve(Q, t2));
        if (d1 < d2) {
            t = t1;
        } else {
            t = t2;
        }
    }

    Proj = curve(Q,  t);
    vDist = UV - Proj;
    Dist = length(vDist);
    Tang = tangent(Q, t);
    sDist = sign(vDist.x * Tang.y - vDist.y * Tang.x) * Dist;
}